name: Brail 数据库测试

# 当 database 分支有提交时触发
on:
  push:
    branches:
      - database  # 监听 database 分支的推送
  pull_request:
    branches:
      - database  # 监听向 database 分支的 PR

# 定义作业
jobs:
  test-brail-database:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 服务配置 - MySQL 数据库服务
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 123456
          MYSQL_DATABASE: brail_db
        options: >-
          --health-cmd="mysqladmin ping -h localhost -P 3306 -u root -p123456 --protocol=TCP"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 15
          --health-start-period 60s
        ports:
          - 3306:3306

    # 环境变量
    env:
      MYSQL_HOST: localhost
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: 123456
      MYSQL_DATABASE: brail_db
      PYTHON_VERSION: 3.9

    # 步骤定义
    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 设置 Python 环境
      - name: 设置 Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 3. 缓存依赖
      - name: 缓存 pip 依赖
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. 安装 Python 依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          # 如果项目有 requirements.txt 文件
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi
          # 安装 FastAPI 和数据库相关依赖
          pip install fastapi uvicorn pymysql sqlalchemy

      # 5. 等待 MySQL 数据库服务启动
      - name: 等待 MySQL 启动
        run: |
          # 安装 MySQL 客户端和 Python 依赖
          sudo apt-get update -qq
          sudo apt-get install -y -qq mysql-client
          
          
          # 使用 Python 检查 MySQL 连接（不指定数据库）
          python3 -c "
          import time
          import pymysql
          
          print('等待 MySQL 服务启动...')
          for i in range(30):
              try:
                  # 连接到 MySQL 服务器（不指定数据库）
                  conn = pymysql.connect(
                      host='${{ env.MYSQL_HOST }}',
                      port=${{ env.MYSQL_PORT }},
                      user='${{ env.MYSQL_USER }}',
                      password='${{ env.MYSQL_PASSWORD }}'
                  )
                  conn.close()
                  print('MySQL 已启动')
                  break
              except Exception as e:
                  print(f'等待 MySQL 启动... ({i+1}/30) - {str(e)[:100]}')
                  time.sleep(3)
          else:
              print('MySQL 启动超时')
              exit(1)
          "

      # 6. 运行集成测试
      - name: 运行集成测试
        run: |
          cd backend
          echo "🧪 开始运行数据库连接集成测试..."
          # 运行 test_database.py 集成测试
          python -m pytest integration_tests/test_database.py -v
          echo "✅ 集成测试完成"
        env:
          MYSQL_HOST: ${{ env.MYSQL_HOST }}
          MYSQL_PORT: ${{ env.MYSQL_PORT }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}

      # 7. 生成测试报告
      - name: 生成测试报告
        run: |
          echo "📊 数据库连接集成测试报告"
          echo "=========================="
          echo "✅ 集成测试 - test_database.py: 通过"
          echo "✅ 数据库连接功能: 正常"
          echo "=========================="

      # 8. 清理测试环境
      - name: 清理测试环境
        if: always()
        run: |
          echo "🧹 清理测试环境..."
          echo "✅ 测试环境清理完成"
